package day17;

import java.util.HashMap;
import java.util.HashSet;

public class Day17Task1 {
    record Coord(int x, long y) {
    }

    record RowState(int y0, int y1, int y2, int y3, int y4, int y5, int y6) {
    }

    record RockDiffHeight(long dy, long dr) {
    }

    public static void main(String[] args) {
        String[] rs = ROCKS.split("\n\n");
        String[][] rocks = new String[rs.length][];
        {
            int i = 0;
            for (String rockLines : rs) {
                rocks[i++] = rockLines.split("\n");
            }
        }

        String input = TEST_INPUT;

        HashSet<Coord> blocks = new HashSet<>();
        int nextRock = 0;
        int nextAir = 0;
        long highestRock = 0;
        long additionHeight = 0;

        // long totalrocks = 2022;
        // long totalrocks = 10000L;
        long totalrocks = 1000000000000L; // 2022;

        long[] highestBlocked = new long[] { -1, -1, -1, -1, -1, -1, -1 };
        long lowestBlockedTotal = -1;

        System.out.println("il: " + input.length());

        int repeat = input.length() * rocks.length;
        long lasthr = 0;
        int expectedNextAir = -1;

        HashMap<RowState, RockDiffHeight> repeatedRowstates = new HashMap<>();

        rockSpawn: for (long i = 0; i < totalrocks; i++) {
            int rockNr = nextRock;
            nextRock = (nextRock + 1) % rocks.length;

            // if (i % repeat == 100L) {
            // System.out.println(i + " " + highestRock + " -- " + (highestRock - lasthr));
            // lasthr = highestRock;
            // }
            String[] currentRockData = rocks[rockNr];
            int rockWidth = currentRockData[0].length();
            int rockx = 2;
            long rocky = highestRock + 2 + currentRockData.length;

            while (true) {
                {
                    char wind = input.charAt(nextAir);
                    nextAir = (nextAir + 1) % input.length();

                    int testx = wind == '<' ? rockx - 1 : rockx + 1;

                    // check for collisions
                    if (testx >= 0 && testx + rockWidth <= 7) {
                        boolean collision = false;
                        collisionCheck: for (int rockLine = 0; rockLine < currentRockData.length; rockLine++) {
                            String rockString = currentRockData[rockLine];
                            for (int cc = 0; cc < rockString.length(); cc++) {
                                if (rockString.charAt(cc) == '#') {
                                    if (blocks.contains(new Coord(testx + cc, rocky - rockLine))) {
                                        collision = true;
                                        break collisionCheck;
                                    }
                                }
                            }
                        }
                        // System.out.println("Rock " + i + " Wind " + wind + " coll: " + collision);
                        if (!collision) {
                            rockx = testx;
                        }
                    } else {
                        // System.out.println("Rock " + i + " Wind " + wind + " coll: border");
                    }
                }
                long testy = rocky - 1;

                boolean collision = false;
                collisionCheck: for (int rockLine = 0; rockLine < currentRockData.length; rockLine++) {
                    String rockString = currentRockData[rockLine];
                    for (int cc = 0; cc < rockString.length(); cc++) {
                        if (rockString.charAt(cc) == '#') {
                            if (testy - rockLine < 0 || blocks.contains(new Coord(rockx + cc, testy - rockLine))) {
                                collision = true;
                                break collisionCheck;
                            }
                        }
                    }
                }
                if (!collision) {
                    rocky = testy;
                } else {
                    // set rock
                    highestRock = Math.max(highestRock, rocky + 1);

                    for (int rockLine = 0; rockLine < currentRockData.length; rockLine++) {
                        String rockString = currentRockData[rockLine];
                        for (int cc = 0; cc < rockString.length(); cc++) {
                            if (rockString.charAt(cc) == '#') {
                                blocks.add(new Coord(rockx + cc, rocky - rockLine));
                                if (rocky - rockLine > highestBlocked[rockx + cc]) {
                                    highestBlocked[rockx + cc] = rocky - rockLine;
                                }
                            }
                        }
                    }

                    long newLowestBlockedTotal = -1;
                    for (int j = 0; j < 7; j++) {
                        newLowestBlockedTotal = Math.min(newLowestBlockedTotal, highestBlocked[j]);
                    }
                    if (newLowestBlockedTotal > lowestBlockedTotal) {
                        for (long y = lowestBlockedTotal - 1; y < newLowestBlockedTotal - 1; y++) {
                            for (int j = 0; j < 7; j++) {
                                blocks.remove(new Coord(j, y));
                            }
                        }
                        lowestBlockedTotal = newLowestBlockedTotal;
                    }

                    // find repeated air at rock 0, do not start to look too early (i > repeat)
                    if (i > repeat && nextRock == 0 && expectedNextAir < 0) {
                        expectedNextAir = nextAir;
                    }

                    // System.out.println(nextRock + " +++ " + nextAir);
                    if (nextRock == 0 && nextAir == expectedNextAir) {
                        long repeatId = i;
                        RowState rst = new RowState((int) (highestRock - highestBlocked[0]), (int) (highestRock - highestBlocked[1]), (int) (highestRock - highestBlocked[2]), (int) (highestRock - highestBlocked[3]), (int) (highestRock - highestBlocked[4]), (int) (highestRock - highestBlocked[5]),
                                (int) (highestRock - highestBlocked[6]));
                        RockDiffHeight old = repeatedRowstates.get(rst);
                        System.out.println(rst);
                        if (old != null) {
                            long repeatPeriod = (repeatId - old.dr());
                            long deltaHeight = (highestRock - old.dy());
                            System.out.println("Repeated at " + repeatPeriod + " dh: " + deltaHeight);
                            repeatedRowstates.put(rst, new RockDiffHeight(highestRock, repeatId));
                            long missingRocks = totalrocks - i;
                            long periodRepetitions = missingRocks / repeatPeriod;
                            i += periodRepetitions * repeatPeriod;
                            additionHeight = periodRepetitions * deltaHeight;
                        } else {
                            repeatedRowstates.put(rst, new RockDiffHeight(highestRock, repeatId));
                        }
                    }

                    continue rockSpawn;
                }
            }

        }
        System.out.println(highestRock + additionHeight);

        // for (int y = highestRock; y >= 0; y--) {
        // for (int x = -1; x <= 7; x++) {
        // System.out.print(x == -1 || x == 7 ? '#' : blocks.contains(new Coord(x, y)) ? '@' : '.');
        // }
        // System.out.println();
        // }

    }

    private static final String ROCKS = "####\n"
            + "\n"
            + ".#.\n"
            + "###\n"
            + ".#.\n"
            + "\n"
            + "..#\n"
            + "..#\n"
            + "###\n"
            + "\n"
            + "#\n"
            + "#\n"
            + "#\n"
            + "#\n"
            + "\n"
            + "##\n"
            + "##";

    private static final String TEST_INPUT = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
    private static final String
}
