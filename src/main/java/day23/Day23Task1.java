package day23;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;

public class Day23Task1 {
    record Elf(int x, int y) {
    }

    public static void main(String[] args) {
        String[] lines = INPUT.split("\n");
        HashSet<Elf> elves = new HashSet<>();
        for (int i = 0; i < lines.length; i++) {
            char[] chars = lines[i].toCharArray();
            for (int j = 0; j < chars.length; j++) {
                if (chars[j] == '#') {
                    elves.add(new Elf(j, i));
                }
            }
        }
        int firstLookDirection = 0;
        int i = 0;
        while (true) {
            i++;
            HashMap<Elf, Elf> movingElves = new HashMap<>();
            HashSet<Elf> targets = new HashSet<>();
            HashSet<Elf> collisions = new HashSet<>();
            for (Elf elf : elves) {
                boolean perceptionNW = elves.contains(new Elf(elf.x - 1, elf.y - 1));
                boolean perceptionN = elves.contains(new Elf(elf.x, elf.y - 1));
                boolean perceptionNE = elves.contains(new Elf(elf.x + 1, elf.y - 1));
                boolean perceptionE = elves.contains(new Elf(elf.x + 1, elf.y));
                boolean perceptionSE = elves.contains(new Elf(elf.x + 1, elf.y + 1));
                boolean perceptionS = elves.contains(new Elf(elf.x, elf.y + 1));
                boolean perceptionSW = elves.contains(new Elf(elf.x - 1, elf.y + 1));
                boolean perceptionW = elves.contains(new Elf(elf.x - 1, elf.y));
                int movedir = -1;
                if (perceptionNW || perceptionN || perceptionNE || perceptionE || perceptionSE || perceptionS || perceptionSW || perceptionW) {
                    for (int lookTry = 0; lookTry < 4; lookTry++) {
                        int lookDirection = (lookTry + firstLookDirection) % 4;
                        if (lookDirection == 0) {
                            if (!perceptionNW && !perceptionN && !perceptionNE) {
                                movedir = 0;
                                break;
                            }
                        } else if (lookDirection == 1) {
                            if (!perceptionSE && !perceptionS && !perceptionSW) {
                                movedir = 1;
                                break;
                            }
                        } else if (lookDirection == 2) {
                            if (!perceptionNW && !perceptionW && !perceptionSW) {
                                movedir = 2;
                                break;
                            }
                        } else if (lookDirection == 3) {
                            if (!perceptionNE && !perceptionE && !perceptionSE) {
                                movedir = 3;
                                break;
                            }
                        }
                    }
                }
                // not moving elves cannot cause collisions, because they are not blind
                if (movedir >= 0) {
                    int tox = elf.x + (movedir == 2 ? -1 : movedir == 3 ? 1 : 0);
                    int toy = elf.y + (movedir == 0 ? -1 : movedir == 1 ? 1 : 0);
                    Elf target = new Elf(tox, toy);
                    movingElves.put(elf, target);
                    if (!targets.add(target)) {
                        collisions.add(target);
                    }
                }
            }
            boolean anyMove = false;
            for (Entry<Elf, Elf> e : movingElves.entrySet()) {
                Elf from = e.getKey();
                Elf to = e.getValue();
                if (!collisions.contains(to)) {
                    elves.remove(from);
                    elves.add(to);
                    anyMove = true;
                }
            }
            firstLookDirection = (firstLookDirection + 1) % 4;
            if (i == 10) {
                int minx = Integer.MAX_VALUE;
                int miny = Integer.MAX_VALUE;
                int maxx = Integer.MIN_VALUE;
                int maxy = Integer.MIN_VALUE;
                for (Elf elf : elves) {
                    minx = Math.min(minx, elf.x);
                    miny = Math.min(miny, elf.y);
                    maxx = Math.max(maxx, elf.x);
                    maxy = Math.max(maxy, elf.y);
                }

                System.out.println("Space after round 10: " + ((maxx - minx + 1) * (maxy - miny + 1) - elves.size()));
            }
            if (!anyMove) {
                System.out.println("First round where no elf moves: " + i);
                break;
            }
        }
    }

    public final static String INPUT_TEST = "....#..\n"
            + "..###.#\n"
            + "#...#.#\n"
            + ".#...##\n"
            + "#.###..\n"
            + "##.#.##\n"
            + ".#..#..";

    public final static String INPUT = "......#.##.###.###..##...#.###..###....##....#.#.#.#...#.#..#####.#..#.#..\n"
            + "#######.##...##.##..#..##.#....#.###.##...#...##......######...#...###..#.\n"
            + "...#.#.##.#.##.#.#..#..#.#.##.######...###.....#.#.##..##..##.#..####..###\n"
            + ".##.#.##.#.#.#..#.##.###..........###..#.##.....#..#####.#....#.##...#..##\n"
            + "#.#...###...#.##.....#####.#.#.###..##.#...#..#.#.###.##......#.###.#####.\n"
            + "....##....#####..##.#....#.##.#.##....##.####..#.##...#..##..#.##....#.##.\n"
            + ".......##.#..#..##...####.##.#..###.....##.##...#.....###.###...#....#....\n"
            + ".####.##.##..#...##.##...###..####..####....#####.###.####....###.###.#...\n"
            + "####..##.#..##.###...####..#####....#.####.............##.###.......#....#\n"
            + "..........#...##....#.#####..#....##.###...####...##..###.##.#.##......###\n"
            + ".........#.#.##.##..#.#.####.#.##.#.##..#...##..##...#.#####...##.#..#..#.\n"
            + "##..#...#..#.###.###..#....##.#......###...#.#...#.#.##...#####..##.###...\n"
            + ".##.##......#.####..#..#...#.#..##..##..#..##..###.#.##.....#..##.###.#.#.\n"
            + ".############...#.#.##..##...........#.######.#..####.####...###..#.#.#.#.\n"
            + "#...##..##.....###.#...##..##..##.....#...#..###..###..####.#.#..#.##..###\n"
            + "#...##.#.#..##.###.#.....####.#.#...#....#####.##...#.#.###....#.#.#.#..##\n"
            + "##.###..####.....#####..###.##..###..#####.#.#####.#.#...#.#...###.###.###\n"
            + "####...#.####..#.#.##..#..#..##..##.#.........#.#..##.####.###......#...##\n"
            + "#....##.####.##.#.#.#.##.##..##.##.#.#.#......#.####.##..#..##..#..##..#..\n"
            + "..##...##.#.###.##..##.#..##.......#.####.#...#...#.#...###...#..####..###\n"
            + "##.#..####..#.#.##.##..#.##..##.......####...######.######...#....#.......\n"
            + "##....##.####..###.....####..###.#..#.######.##..###.#..##...#.###..#.###.\n"
            + ".####.#.###########..###........#.#.##.##.###...#.##.#..###.#.#.....#####.\n"
            + "##.#.###..##....###...##.##....##.#.#..#.###.##..#.#...###...####.##..###.\n"
            + ".#.#.#.###.#.###.....#..#.#######.......#.#.#.#######..####.#..###.#...#.#\n"
            + "#..##..##.#.#.#.##....#.#.###.#..##.##..##.####.#.#.#.........##.#.#....##\n"
            + "###..#.#...#...##.###...#..#.#.#.#.###..#.###...#.#.###.######.##.##....##\n"
            + "#.#....#.###.#.##..#...#..###.####..#.##..#.#.#.##...###...#.##..#.#.#####\n"
            + ".....#.#.....#.###.#.##.#...#....##.#.#.#..#.#####.##..#.#..##.#.#####..##\n"
            + "...#......#.###.###...####..####...##...####.###.##...#...#######..#..##..\n"
            + "##.....#...####.#.#...#...#..##..#...#####.##.#..#....##.###.##....#.#.###\n"
            + "#.####.#..##.#####.##..###.#..........###..#...#.#..##.#..####.....#......\n"
            + "....#.###.....#...#.#.##.##...####..##.#.##.#...###.#####.#..#.##.#.....##\n"
            + "#.###.#....#..#.###..#..##..######.##.#.#.###.#.#.##..##...#.##..#..##...#\n"
            + "###..####.##...#..#.##...#...#...###.###..###.#...#..##.#.#.###..##.#..##.\n"
            + "#.##.###..#....#....#..#.##.......###.###.#.###.##......#####..#...###.###\n"
            + "#.#.#..#..#.#######.##..#....##....#.###.##...##...#..#.####.#.##..#....#.\n"
            + "##..##.###.#..#.#..#.#.#.#..#.##.###.#.##..##...###########..###.#.#..###.\n"
            + "..#..##..##########...#########.#.#.#......###......#.....#....##..######.\n"
            + ".#.#...#..#..#....#.#.#...##..##.##.#....##....#..#...##..#.##...#...##.#.\n"
            + "##..#.#.#.####...##.####..###....#.#.##.#.#...#.##.#...######.##..#####.#.\n"
            + "#.#..###...#..##..###.#.#.#..#..#.#.#...#.##.#....#...##.###.##.#..##.#..#\n"
            + "#...#..##..#...#......####....#.#.##..#.##.###..##.##.#..#.#####.##.#.####\n"
            + ".####....##.#..####..##.#..#.#.######.####..##.......###...#####.....#....\n"
            + "..#..##.#.#..#####...##.#....####...##.#.#.###.#.##.#..#.###..###.##..##..\n"
            + "###..###.##.#.......##...##..#..#.#..#.#.##..#.####.#.##..#.##.###.##..###\n"
            + "#.....######.#...##...#.#.#####..#.######.....#..#..###..#.###....###..###\n"
            + "#...##....###..#.#.##..#.###.##..####.#..#...#.#....##.#.####...#####.#.#.\n"
            + "#.#.#...##.#######....#..###..####.#.#####....###.##.#...#.#####.#...###.#\n"
            + "####.#......#..#.#.##.####....#.#.##.#...#...##..#........###.###.##.#...#\n"
            + "#####..##..##.#####....#.#.#..#.##......##.##...#.#...#.####.#.##.#####.##\n"
            + ".#.#.####..##...#...#..##..#.#..###...#...#######..##.#####..#..#..#....##\n"
            + "###.....###..##.#..#####.#..#...###.##.##.###..#....#.....##.#.#.###...###\n"
            + "..#...######..##.#.#.#.########.###....#...#.##...#..##.#.##..###...#.###.\n"
            + "##..#....##..########.###..#..#.##..#######.#.#..#.#.##..##.#...##....#..#\n"
            + "#.##..#....###...#.##..#.#.#..#.....#...####....####..##..#..#..#..#.##.#.\n"
            + "##...#...#.#..#...#..####.#...##..#..###.##.....#.##.##..#.##.##.#..#.####\n"
            + "####....####.##...#.##..#...##...#.##.####.....###.#.#.###...#.##.##.##.##\n"
            + "#...#.#....#.#.#####.##.#.##.#...#.##.#...#...#.##..##...#...#..#...#..##.\n"
            + "#..####.#..#...##.#.####..###...##.###.#######...#.....#..#.#####..##..##.\n"
            + "##.#...##..###########.....##.##..#...#.####....#.#....####.##.#.###.#.##.\n"
            + "#...#..#.#####.#....#.##..###...#..#...#######.#...##..#..#.###..#.##.#..#\n"
            + "###.##...#.####....##.########......#...#...####.#..####.##.##..##..##....\n"
            + "##..###..#####...###..#.#...#..###....###.#..###....#.......#.###.#.#.#.##\n"
            + "........#.#....#..#.#...#...#####.####.....###...##.#.#...#.#..###...##..#\n"
            + "#.....###.####....###.#.##.##.#.##..#.#...##..##.....#.#..#.###.##.#......\n"
            + "..#...##.#..###.###..#..##...#.#..#.#####.##..##..#..#.....#####.######..#\n"
            + "...#...##.#.#......###.####..#.##...#..#....##.#.####..#.#..#...#.##.#..#.\n"
            + ".#.....##.#..####.###.#.#...#..#...#.##.#.#.#.####.##...#..###..####.#####\n"
            + "..##..##.#.##......#.#.####.#####.#.##..###.##........#....#..#.#..##.##..\n"
            + "..##..##...#..###...#..#.#...#.....###...##..###.###..##.#.#....#..#..##..\n"
            + "##.#..#.#.###....###..##...###.##.#..#####..##..##..#.......##..#.###..#..\n"
            + "#..#.###.###.##.###.###....#..#..##.##.#.#.##.#.#....##.#..#.#.###.##.###.\n"
            + ".##.#..#.###....##.####.##........#..####..#..#.....#.##..#.#..#..###.#..#";
}
